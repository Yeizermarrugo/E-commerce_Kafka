services:
    zookeeper:
        image: wurstmeister/zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        networks:
            - kafka-net

    kafka:
        image: wurstmeister/kafka
        container_name: kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ADVERTISED_PORT: 9092
        networks:
            - kafka-net
        depends_on:
            - zookeeper

    kafdrop:
        image: obsidiandynamics/kafdrop
        container_name: kafdrop
        ports:
            - "9000:9000"
        environment:
            KAFKA_BROKERCONNECT: kafka:9092
        networks:
            - kafka-net
        depends_on:
            - kafka
    postgres:
        image: postgres:latest
        container_name: postgres
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: ecommerce
        ports:
            - "5050:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - kafka-net
    mongodb:
        image: mongo
        container_name: mongodb
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        networks:
            - kafka-net

    user-service:
        build: ./user-service
        container_name: user-service
        ports:
            - "7000:7000"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: user-registration
            TOPIC_LOGGEDIN: user-loggedin
            JWT_SECRET: user-kafka
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ecommerce
            DB_USER: postgres
            DB_PASSWORD: postgres
            NODE_ENV: development

        networks:
            - kafka-net
        depends_on:
            - kafka
            - mongodb
            - postgres
    mail-dispatcher:
        container_name: mail-dispatcher
        build: ./mail-dispatcher
        ports:
            - "3001:3001"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: welcome-flow
            SERVICE_EMAIL: mail-dispatcher@service.com
            SERVICE_PASSWORD: mail-dispatcher
        depends_on:
            - kafka
            - mongodb
        networks:
            - kafka-net

    notification-service:
        container_name: notification-service
        build: ./notification-service
        ports:
            - "3002:3002"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: notification-topic
            SMTP_HOST: sandbox.smtp.mailtrap.io
            SMTP_PORT: 2525
            SMTP_USER: 2cc439c567232c
            SMTP_PASS: 7cbd7298357c07
        depends_on:
            - kafka
            - mongodb
        networks:
            - kafka-net

    product-service:
        container_name: product-service
        build: ./product-service
        ports:
            - "3003:3003"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: product-create
            JWT_SECRET: user-kafka
            PORT: 3003
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ecommerce
            DB_USER: postgres
            DB_PASSWORD: postgres
            NODE_ENV: development
        depends_on:
            - kafka
            - mongodb
        networks:
            - kafka-net
    cart-service:
        container_name: cart-service
        build: ./cart-service
        ports:
            - "3004:3004"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: cart-update
            TOPIC_REMOVALS: cart-removals
            JWT_SECRET: user-kafka
            PORT: 3004
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ecommerce
            DB_USER: postgres
            DB_PASSWORD: postgres
            NODE_ENV: development
        depends_on:
            - kafka
            - mongodb
        networks:
            - kafka-net
    order-service:
        container_name: order-service
        build: ./order-service
        ports:
            - "3005:3005"
        environment:
            KAFKA_BROKER: kafka:9092
            MONGO_URI: mongodb://mongodb:27017/eventstore
            TOPIC: order-created
            JWT_SECRET: user-kafka
            PORT: 3005
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ecommerce
            DB_USER: postgres
            DB_PASSWORD: postgres
            NODE_ENV: development
        depends_on:
            - kafka
            - mongodb
        networks:
            - kafka-net
volumes:
    mongodb_data:
    postgres_data:

networks:
    kafka-net:
        driver: bridge
    ecommerce-net:
        driver: bridge
